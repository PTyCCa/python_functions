"""Это испытание представляет собой задание повышенной сложности. Помните: в самом начале обучения программированию вполне нормально не уметь решать подобные задачи!

В этом испытании вам предстоит решить ту же проблему, что вы могли решать в испытании "Увеличение двумерного списка" (вам стоит это проделать, если вы ещё не проходили то испытание).

Задача заключается в том, что нужно реализовать функцию enlarge(), которая увеличивает переданное "изображение" в два раза: каждый "пиксель" удваивается по горизонтали и вертикали. Изображением служит список строк, а пиксели в нём — символы строк.
Сама задача не отличается от задачи в оригинальном упражнении, однако в этот раз вам предстоит решить проблему в функциональном стиле!

Вы не должны использовать изменяемые структуры данных, переменные, циклы и даже рекурсию. Всё, что вы можете делать, это определять функции через композицию существующих!
Вам даны функции-комбинаторы curry() и compose(), а так же две простые функции pair() и dup().

Функция curry() превращает функцию двух аргументов в функцию от первого, возвращающую функцию от второго (такая операция называется каррированием)
Функция compose() берёт одну функцию, затем другую и возвращает их композицию
Оставшиеся две функции элементарны
Ваша задача описать функцию enlarge(), через указанные функции и, возможно, map/filter/reduce. Имейте в виду, что задачу можно решить с использованием одних лишь упомянутых выше функций, и не потребуются даже lambda-функции!"""

# Линтер закономерно ругается на такие функции, потому что
# обычно именованные функции не делаются с помощью лямбд.
curry = lambda f: lambda x: lambda y: f(x, y)  # noqa: E731
compose = lambda f: lambda g: lambda x: f(g(x))  # noqa: E731

pair = lambda x: [x, x]  # noqa: E731
dup = lambda x: x + x  # noqa: E731

# BEGIN

# Импорты тоже обычно пишутся в начале модуля, но здесь они скрыты
# с целью сохранить интригу :)

from functools import reduce  # noqa: 402
from operator import add # noqa: 402

concat = curry(reduce)(add)
concat_map = compose(compose(concat))(curry(map))

enlarge = concat_map(compose(pair)(concat_map(dup)))

# END

if __name__ == '__main__':
    display = compose(print)('\n'.join)  # noqa: T002
    display(enlarge([
        '+--+',
        '|x |',
        '| o|',
        '+--+',
    ]))

